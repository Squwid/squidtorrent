package client

import (
	"bytes"
	"fmt"
	"net"
	"time"

	"github.com/Squwid/squidtorrent/bitfield"
	"github.com/Squwid/squidtorrent/handshake"
	"github.com/Squwid/squidtorrent/message"
	"github.com/Squwid/squidtorrent/peers"
)

// A Client is a TCP connection with a peer
type Client struct {
	Conn     net.Conn
	Choked   bool
	Bitfield bitfield.Bitfield

	peer     peers.Peer
	infoHash [20]byte
	peerID   [20]byte
}

// getBitfield grabs the bitfield from the connected peer. Handshake was already good, see what
// pieces the peer has
func getBitfield(conn net.Conn) (bitfield.Bitfield, error) {
	conn.SetDeadline(time.Now().Add(5 * time.Second))
	defer conn.SetDeadline(time.Time{}) // If bitfield is good set connection to infinite

	msg, err := message.Read(conn)
	if err != nil {
		return nil, err
	}
	if msg == nil {
		// Keep alive message, not cool for initial bitfield resp
		return nil, fmt.Errorf("expected bitfield but got nil")
	}
	if msg.ID != message.MsgBitfield {
		return nil, fmt.Errorf("expected messageID %v but got %v", message.MsgBitfield, msg.ID)
	}

	return msg.Payload, nil
}

// completeHandshake completes a handshake with a connection with a peer, makes sure they have the file
// and is ready to start sending
func completeHandshake(conn net.Conn, infohash, peerID [20]byte) (*handshake.Handshake, error) {
	conn.SetDeadline(time.Now().Add(3 * time.Second))
	defer conn.SetDeadline(time.Time{}) // If connection is successful disable handshake timeout

	req := handshake.New(infohash, peerID)
	_, err := conn.Write(req.Serialize()) // Send handshake request through established connection
	if err != nil {
		return nil, err
	}

	res, err := handshake.Read(conn)
	if err != nil {
		return nil, err
	}

	// Check hashes
	if !bytes.Equal(res.InfoHash[:], infohash[:]) {
		return nil, fmt.Errorf("expected infohash %x but got %x", res.InfoHash, infohash)
	}
	return res, nil
}

// New connects with a peer, completes a handshake and grabs the bitfield from the peer
func New(peer peers.Peer, peerID, infoHash [20]byte) (*Client, error) {
	// Initiate a TCP connection with the peer, pretty default timeout
	conn, err := net.DialTimeout("tcp", peer.String(), 3*time.Second)
	if err != nil {
		return nil, err
	}

	// Now to handshake, still need to verify communication over BitTorrent protocol and its got the files
	/* BITTORRENT HANDSHAKE REQUIREMENTS
	 * 	Length of protocol identifier is always 19
	 *	Protocol identifier is 'BitTorrent protocol'
	 *	Eight reserved bytes all set to 0, some could be 1 when i add extensions
	 *	Infohash is included to get specific file
	 *	PeerID is contained (could be autogenerated for this)
	 *
	 * After sending handshake, expect back the same format, with infohash matching, otherwise conneciton can be :trashcan:
	 */

	_, err = completeHandshake(conn, infoHash, peerID)
	if err != nil {
		conn.Close()
		return nil, err
	}

	// Get what parts of the file that the peer has
	bf, err := getBitfield(conn)
	if err != nil {
		conn.Close()
		return nil, err
	}

	return &Client{
		Conn:     conn,
		Choked:   true, // Choked is assumed true
		Bitfield: bf,
		peer:     peer,
		infoHash: infoHash,
		peerID:   peerID,
	}, nil
}

/* Client methods for sending/receiving messages */

func (c Client) Read() (*message.Message, error) {
	return message.Read(c.Conn)
}

func (c Client) SendUnchoked() error {
	msg := message.Message{ID: message.MsgUnchoke}
	_, err := c.Conn.Write(msg.Serialize())
	return err
}

func (c Client) SendInterested() error {
	msg := message.Message{ID: message.MsgInterested}
	_, err := c.Conn.Write(msg.Serialize())
	return err
}

func (c *Client) SendRequest(index, offset, length int) error {
	req := message.FormatRequest(index, offset, length)
	_, err := c.Conn.Write(req.Serialize())
	return err
}

func (c *Client) SendHave(index int) error {
	msg := message.FormatHave(index)
	_, err := c.Conn.Write(msg.Serialize())
	return err
}
